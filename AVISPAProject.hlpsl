% A -> S: ({A.B.Na}_Ka)  % Ka is a key shared by A and S
% A <- S: ({K.Na}_Ka.  % S generates new key K 
%                      % {K.Na}_Ka does not need Na, but it helps A identify the session for the key K
%          {K.Na.A}_Kb)  % A cannot decrypt the contents of {K.Na.Ns}_Kb, but is able to forward it to B
%                        % if A is not encrypted with Kb, the attacker will be able to pretend to be A when contacting B
% A -> B: ({K.Na.A}_Kb)  % The last part is a key confirmation
% A <- B: ({Na.Nb}_K)  % A tests if B knows K during this session, by using Na
% A -> B: ({Nb.Na}_K)  % B tests if A knows K during this session, by using Nb
%                      % Na is not necessary, but it helps B identify the session when receiving Nb

role alice (A, S, B : agent,
	    Ka      : symmetric_key,
	    SND_SA, RCV_SA, SND_BA, RCV_BA : channel(dy))

played_by A def=
    local State : nat,
          Na,Nb : text,
          K     : symmetric_key,
          X     : {symmetric_key.text.agent}_symmetric_key
    init State := 0

    transition
    1. State  = 0 /\ RCV_BA(start) =|>
       State':= 2 /\ Na' := new()
                  /\ SND_SA({A.B.Na'}_Ka)

    2. State  = 2 /\ RCV_SA({K'.Na}_Ka.X') =|>
       State':= 4 /\ SND_BA(X')

    3. State  = 4 /\ RCV_BA({Na.Nb'}_K) =|>
       State':= 6 /\ SND_BA({Nb'.Na}_K)
                  /\ request(A,B,alice_bob_na,Na) % A verifies that B knows K (B can decrpyt and encrypt again Na)
                  /\ witness(A,B,bob_alice_nb,Nb') 
end role


role server (A, S, B  : agent,
             Ka, Kb   : symmetric_key,
             SND_AS, RCV_AS : channel(dy))

played_by S def=
    local State : nat,
          Na    : text,
          K     : symmetric_key
    init  State := 1

    transition
    1. State  = 1 /\ RCV_AS({A.B.Na'}_Ka) =|>
       State':= 3 /\ K' := new()
                  /\ SND_AS({K'.Na'}_Ka.{K'.Na'.A}_Kb)
                  /\ secret(K',k,{A,B,S})
end role


role bob (A, S, B : agent,
          Kb      : symmetric_key,
          SND_AB, RCV_AB : channel(dy))

played_by B def=
     local State  : nat,
           Na,Nb  : text,
           K      : symmetric_key
     init  State := 5

     transition
     1. State  = 5 /\ RCV_AB({K'.Na'.A}_Kb) =|>
        State':= 7 /\ Nb' := new()
                   /\ SND_AB({Na'.Nb'}_K')
                   /\ witness(B,A,alice_bob_na,Na')
                   
     2. State  = 7 /\ RCV_AB({Nb.Na}_K) =|>
        State':= 9 /\ request(B,A,bob_alice_nb,Nb) % B verifies that A knows K (A can decrpyt and encrypt again Nb)
                   
end role


role session(A, S, B : agent,
             Ka, Kb  : symmetric_key)
def=
     local
        SSA, RSA,
        SBA, RBA,
        SAS, RAS,
        SAB, RAB : channel (dy)

     composition
              alice (A, S, B, Ka, SSA, RSA, SBA, RBA)
          /\  server(A, S, B, Ka, Kb, SAS, RAS)
          /\  bob   (A, S, B, Kb, SAB, RAB)
end role


role environment()
def=
      const a, b, s         : agent,
            ka, kb, ki      : symmetric_key,
            alice_bob_na, bob_alice_nb, k : protocol_id

      intruder_knowledge = {a, b, s, ki}

      composition         
              session(a,s,b,ka,kb)
           /\ session(a,s,i,ka,ki)
           /\ session(i,s,b,ki,kb)
           /\ session(i,s,a,ki,ka)
end role


goal
    secrecy_of k
    authentication_on alice_bob_na
    authentication_on bob_alice_nb
end goal

environment()